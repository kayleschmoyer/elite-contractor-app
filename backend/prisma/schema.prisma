// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum Role {
  ADMIN
  USER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

// --- Models ---
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  role          Role     @default(USER)
  companyId     String
  projects      Project[] // Relation to Projects authored by user
  assignedTasks Task[]    @relation("AssignedTasks") // Relation to Tasks assigned to user
}

model Project {
  id        String   @id @default(cuid())
  name      String
  status    String
  address   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId  String?
  companyId String
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  clientId  String?

  // --- NEW Scheduling Fields ---
  startDate DateTime? // Optional start date for the project
  endDate   DateTime? // Optional end date for the project
  // --- End NEW Fields ---

  tasks     Task[]    // Relation to Tasks within this project

  @@index([companyId])
  @@index([companyId, clientId])
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companyId String
  projects  Project[]

  @@index([companyId])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  status      TaskStatus @default(TODO)
  // dueDate     DateTime?  // <-- RENAMED this field
  notes       String?
  priority    Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  companyId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  assignee    User?      @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId  String?

  // --- NEW/UPDATED Scheduling Fields ---
  startDate DateTime?  // Optional start date for the task
  endDate   DateTime?  // Optional end/due date for the task (renamed from dueDate)
  // --- End NEW/UPDATED Fields ---

  @@index([companyId])
  @@index([projectId])
  @@index([assigneeId])
}